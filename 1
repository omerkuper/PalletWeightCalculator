import re

class PalletWeightCalculator:
    def __init__(self, text):
        """
        Initializes the PalletWeightCalculator with the input text.
        
        :param text: The input text containing the dimensions and weights.
        """
        self.text = text
        self.dimensions = self.extract_dimensions(text)
        self.weights = self.extract_weights(text)
        self.volumetric_weight = self.volumetric_weight(self.dimensions)
        self.gross_weight = self.total_gross_weight(self.weights)

    def extract_dimensions(self, text):
        """
        Extracts the dimensions (length, width, height) from the input text.
        The dimensions are returned as a list of tuples (length, width, height).
        This function also handles units (cm, mm, m) and converts them to centimeters.
        """
        # Regular expression pattern to match dimensions with or without unit (cm, mm, m)
        pattern = r'(\d+)\s*(mm|cm|m)?\s*(x|×)\s*(\d+)\s*(mm|cm|m)?\s*(x|×)\s*(\d+)\s*(mm|cm|m)?'
        
        # Find all matches
        matches = re.findall(pattern, text)

        dimensions = []
        for match in matches:
            length, length_unit, _, width, width_unit, _, height, height_unit = match
            
            # Convert dimensions based on unit
            if length_unit == 'mm':
                length = int(length) / 10  # Convert mm to cm
            elif length_unit == 'm':
                length = int(length) * 100  # Convert m to cm
            else:
                length = int(length)  # Already in cm

            if width_unit == 'mm':
                width = int(width) / 10  # Convert mm to cm
            elif width_unit == 'm':
                width = int(width) * 100  # Convert m to cm
            else:
                width = int(width)  # Already in cm

            if height_unit == 'mm':
                height = int(height) / 10  # Convert mm to cm
            elif height_unit == 'm':
                height = int(height) * 100  # Convert m to cm
            else:
                height = int(height)  # Already in cm

            dimensions.append((length, width, height))

        return dimensions

    def extract_weights(self, text):
        """
        Extracts the weights (in kg) from the input text.
        The weights are located immediately before the 'kg' string.
        """
        pattern = r'(\d+)\s*kg'
        matches = re.findall(pattern, text)
        return [int(weight) for weight in matches]

    def volumetric_weight(self, dimensions):
        """
        Calculates the volumetric weight for the given dimensions.
        The formula used is: (length * width * height) / 6000 for each dimension.
        The function returns the total sum of volumetric weight for all dimensions.
        """
        return sum((dim[0] * dim[1] * dim[2] / 6000) for dim in dimensions)

    def total_gross_weight(self, weights):
        """
        Calculates the total gross weight from the list of weights.
        The total gross weight is the sum of all individual weights (in kg).
        
        :param weights: A list of individual weights (in kg) for each pallet.
        :return: The total gross weight (sum of all weights).
        """
        return sum((dim) for dim in weights)

    def compare_weights(self):
        """
        Compares the total gross weight and volumetric weight and returns the higher value.
        
        :return: The higher value between gross weight and volumetric weight.
        """
        return max(self.gross_weight, self.volumetric_weight)

    def display_results(self):
        """
        Displays the results for the dimensions, weights, volumetric weight, gross weight,
        and the comparison between the two weights.
        """
        print("Original Dimensions:", self.dimensions)
        print("Weights:", self.weights)
        print("Total Volumetric Weight:", self.volumetric_weight)
        print("Total Gross Weight:", self.gross_weight)
        print("Higher Weight:", self.compare_weights())

# Input text (contains dimensions and weights)
text = """
1 pallet at 120 x 50 x 70cm 130kg (2 x Cool Collars & 2kW VCC’s)
1 pallet at 120x80x70 @ 80kg (1 x Cool Collars & 2kW VCC)
1 pallet at 1m x 80cm x 125cm @ 120kg (4 x RRV3-0848-0707)
1 pallet at 2000mm x 1500mm x 1000mm 500kg (5 x Some Item)
The size of the plastic box is 480 mm x 370mm x 23 mm
"""

# Create an instance of PalletWeightCalculator
calculator = PalletWeightCalculator(text)

# Call the display_results method to output the results
calculator.display_results()
